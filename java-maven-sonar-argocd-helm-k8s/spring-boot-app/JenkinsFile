pipeline {
    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Docker-in-Docker
        }
    }
    environment {
        SONAR_URL = "http://54.160.163.24:9000"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        GIT_USER_NAME = "iam-veeramalla"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir() // remove old files to avoid permission issues
            }
        }

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "abhishekf5/ultimate-cicd:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh "cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} ."
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry(DOCKER_REGISTRY, 'docker-cred') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s
                        git config user.email "sahanan3012@gmail.com"
                        git config user.name "sahana-awscloud"
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                        git add spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning workspace after build"
            deleteDir()
        }
        success {
            echo "Build completed successfully!"
        }
        failure {
            echo "Build failed. Check logs for details."
        }
    }
}
